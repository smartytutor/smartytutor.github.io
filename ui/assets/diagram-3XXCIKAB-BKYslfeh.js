import{p as y}from"./chunk-44GW5IO5-DtaOn5mj.js";import{_ as l,s as B,g as S,t as z,q as F,a as P,b as E,F as v,K as W,e as T,z as D,G as _,H as A,l as w}from"./ScenarioGraphModal-bjEriAKk.js";import{p as N}from"./radar-VG2SY3DT-BSbQuoD2.js";import"./jsx-runtime-DiklIkkE.js";import"./index-DRjF_FHU.js";import"./Action-DUkQC_DA.js";import"./clsx-B-dksMZM.js";import"./Button-BGi-_Oof.js";import"./useAssetPreloader-lqYNbhtK.js";import"./SfxProvider-C05We5iG.js";import"./useSfx-BACfETso.js";import"./Icon-C_N4S_ZJ.js";import"./proxy-BjE8Ig1W.js";import"./Answer-PL8H0T0r.js";import"./Chat-RNtaA_Kh.js";import"./VoiceoverProvider-CSBJPItj.js";import"./Message-CGbUbVro.js";import"./Input-DcyMQBIt.js";import"./Menu-BCBPHnai.js";import"./ProgressBar-DX19bTZY.js";import"./Smartik-DnMQQPug.js";import"./UnsupportedResolution-B_jce17t.js";import"./index-QxjEJx5B.js";import"./redux-toolkit.modern-CeOX0_sF.js";import"./_arrayLikeKeys-BQo_jNKa.js";import"./index-0xIPAiCx.js";import"./NumeralFace-Ds693XiA.js";import"./Slot-CT1AWMYi.js";import"./Lot-DQsF8ln-.js";import"./constants-K3C4fZDC.js";import"./Module-BbZk3Jp-.js";import"./DraggableLot-BAYEXKcw.js";import"./defaults-mPm_OiqA.js";import"./LotPicker-B4IeDM1u.js";import"./Stack-RW0OyjXV.js";import"./LotPalette-CMrf6JxE.js";import"./DraggableToken-B8Igi4VB.js";import"./Sign-DADmf3_9.js";import"./Token-DuPhmN9g.js";import"./AnimatedCard-CCJgi9RF.js";import"./Deck-ngmnPlfX.js";import"./Highlighted-Z1bvx3uf.js";import"./iframe-DMqPaWSn.js";import"./index-DrFu-skq.js";import"./_basePickBy-CoXMqsaI.js";import"./_baseUniq-CHXjvDtp.js";import"./clone-BuDRFRrI.js";var x={packet:[]},u=structuredClone(x),L=A.packet,Y=l(()=>{const t=v({...L,..._().packet});return t.showBits&&(t.paddingY+=10),t},"getConfig"),G=l(()=>u.packet,"getPacket"),H=l(t=>{t.length>0&&u.packet.push(t)},"pushWord"),I=l(()=>{D(),u=structuredClone(x)},"clear"),h={pushWord:H,getPacket:G,getConfig:Y,clear:I,setAccTitle:E,getAccTitle:P,setDiagramTitle:F,getDiagramTitle:z,getAccDescription:S,setAccDescription:B},K=1e4,M=l(t=>{y(t,h);let e=-1,o=[],i=1;const{bitsPerRow:s}=h.getConfig();for(let{start:r,end:a,bits:p,label:g}of t.blocks){if(r!==void 0&&a!==void 0&&a<r)throw new Error(`Packet block ${r} - ${a} is invalid. End must be greater than start.`);if(r??(r=e+1),r!==e+1)throw new Error(`Packet block ${r} - ${a??r} is not contiguous. It should start from ${e+1}.`);if(p===0)throw new Error(`Packet block ${r} is invalid. Cannot have a zero bit field.`);for(a??(a=r+(p??1)-1),p??(p=a-r+1),e=a,w.debug(`Packet block ${r} - ${e} with label ${g}`);o.length<=s+1&&h.getPacket().length<K;){const[c,d]=O({start:r,end:a,bits:p,label:g},i,s);if(o.push(c),c.end+1===i*s&&(h.pushWord(o),o=[],i++),!d)break;({start:r,end:a,bits:p,label:g}=d)}}h.pushWord(o)},"populate"),O=l((t,e,o)=>{if(t.start===void 0)throw new Error("start should have been set during first phase");if(t.end===void 0)throw new Error("end should have been set during first phase");if(t.start>t.end)throw new Error(`Block start ${t.start} is greater than block end ${t.end}.`);if(t.end+1<=e*o)return[t,void 0];const i=e*o-1,s=e*o;return[{start:t.start,end:i,label:t.label,bits:i-t.start},{start:s,end:t.end,label:t.label,bits:t.end-s}]},"getNextFittingBlock"),q={parse:l(async t=>{const e=await N("packet",t);w.debug(e),M(e)},"parse")},R=l((t,e,o,i)=>{const s=i.db,r=s.getConfig(),{rowHeight:a,paddingY:p,bitWidth:g,bitsPerRow:c}=r,d=s.getPacket(),n=s.getDiagramTitle(),f=a+p,m=f*(d.length+1)-(n?0:a),k=g*c+2,b=W(e);b.attr("viewbox",`0 0 ${k} ${m}`),T(b,m,k,r.useMaxWidth);for(const[C,$]of d.entries())U(b,$,C,r);b.append("text").text(n).attr("x",k/2).attr("y",m-f/2).attr("dominant-baseline","middle").attr("text-anchor","middle").attr("class","packetTitle")},"draw"),U=l((t,e,o,{rowHeight:i,paddingX:s,paddingY:r,bitWidth:a,bitsPerRow:p,showBits:g})=>{const c=t.append("g"),d=o*(i+r)+r;for(const n of e){const f=n.start%p*a+1,m=(n.end-n.start+1)*a-s;if(c.append("rect").attr("x",f).attr("y",d).attr("width",m).attr("height",i).attr("class","packetBlock"),c.append("text").attr("x",f+m/2).attr("y",d+i/2).attr("class","packetLabel").attr("dominant-baseline","middle").attr("text-anchor","middle").text(n.label),!g)continue;const k=n.end===n.start,b=d-2;c.append("text").attr("x",f+(k?m/2:0)).attr("y",b).attr("class","packetByte start").attr("dominant-baseline","auto").attr("text-anchor",k?"middle":"start").text(n.start),k||c.append("text").attr("x",f+m).attr("y",b).attr("class","packetByte end").attr("dominant-baseline","auto").attr("text-anchor","end").text(n.end)}},"drawWord"),X={draw:R},j={byteFontSize:"10px",startByteColor:"black",endByteColor:"black",labelColor:"black",labelFontSize:"12px",titleColor:"black",titleFontSize:"14px",blockStrokeColor:"black",blockStrokeWidth:"1",blockFillColor:"#efefef"},J=l(({packet:t}={})=>{const e=v(j,t);return`
	.packetByte {
		font-size: ${e.byteFontSize};
	}
	.packetByte.start {
		fill: ${e.startByteColor};
	}
	.packetByte.end {
		fill: ${e.endByteColor};
	}
	.packetLabel {
		fill: ${e.labelColor};
		font-size: ${e.labelFontSize};
	}
	.packetTitle {
		fill: ${e.titleColor};
		font-size: ${e.titleFontSize};
	}
	.packetBlock {
		stroke: ${e.blockStrokeColor};
		stroke-width: ${e.blockStrokeWidth};
		fill: ${e.blockFillColor};
	}
	`},"styles"),Ot={parser:q,db:h,renderer:X,styles:J};export{Ot as diagram};
