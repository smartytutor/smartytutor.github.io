import{p as y}from"./chunk-44GW5IO5-BRB2kR57.js";import{E as B,s as S,g as F,o as z,p as E,b as P,c as W,_ as l,l as v,F as w,G as T,v as D,K as _,k as A}from"./ScenarioGraphModal-Cn5f270A.js";import{p as N}from"./radar-VG2SY3DT-BTeFo04w.js";import"./jsx-runtime-DR9Q75dM.js";import"./index-DRjF_FHU.js";import"./Action-DQ72ZiUY.js";import"./clsx-B-dksMZM.js";import"./Button-CGecWSMn.js";import"./Icon-DNOHRIBS.js";import"./proxy-C00yw4cG.js";import"./Answer-CpHO1qYv.js";import"./Chat-CUlhg49f.js";import"./VoiceoverProvider-i68q2e-2.js";import"./Message-ByLECGpj.js";import"./Input-0sRJfh9S.js";import"./Menu-DuHofHgY.js";import"./ProgressBar-Dhx3fOxm.js";import"./Smartik-Bonj4xt4.js";import"./SideSlide-DwD6aiwt.js";import"./index-BM9kYpov.js";import"./redux-toolkit.modern-DEr0YuQG.js";import"./_arrayLikeKeys-BOaknIRz.js";import"./Deck-DCC2Jsd6.js";import"./AnimatedCard-BBj7EPCy.js";import"./NumeralFace-CXEVFjF1.js";import"./iframe-J4-sjTlt.js";import"./keysIn-Bb7DVGF9.js";import"./index-DrFu-skq.js";import"./_basePickBy-BI86Qd2Z.js";import"./_baseUniq-eFJhIjt0.js";import"./defaults-BleV3Q12.js";import"./clone-CSZb1OsJ.js";var x={packet:[]},u=structuredClone(x),L=B.packet,Y=l(()=>{const t=w({...L,...T().packet});return t.showBits&&(t.paddingY+=10),t},"getConfig"),G=l(()=>u.packet,"getPacket"),I=l(t=>{t.length>0&&u.packet.push(t)},"pushWord"),K=l(()=>{D(),u=structuredClone(x)},"clear"),h={pushWord:I,getPacket:G,getConfig:Y,clear:K,setAccTitle:S,getAccTitle:F,setDiagramTitle:z,getDiagramTitle:E,getAccDescription:P,setAccDescription:W},M=1e4,O=l(t=>{y(t,h);let e=-1,o=[],i=1;const{bitsPerRow:s}=h.getConfig();for(let{start:r,end:a,bits:c,label:m}of t.blocks){if(r!==void 0&&a!==void 0&&a<r)throw new Error(`Packet block ${r} - ${a} is invalid. End must be greater than start.`);if(r??(r=e+1),r!==e+1)throw new Error(`Packet block ${r} - ${a??r} is not contiguous. It should start from ${e+1}.`);if(c===0)throw new Error(`Packet block ${r} is invalid. Cannot have a zero bit field.`);for(a??(a=r+(c??1)-1),c??(c=a-r+1),e=a,v.debug(`Packet block ${r} - ${e} with label ${m}`);o.length<=s+1&&h.getPacket().length<M;){const[p,d]=H({start:r,end:a,bits:c,label:m},i,s);if(o.push(p),p.end+1===i*s&&(h.pushWord(o),o=[],i++),!d)break;({start:r,end:a,bits:c,label:m}=d)}}h.pushWord(o)},"populate"),H=l((t,e,o)=>{if(t.start===void 0)throw new Error("start should have been set during first phase");if(t.end===void 0)throw new Error("end should have been set during first phase");if(t.start>t.end)throw new Error(`Block start ${t.start} is greater than block end ${t.end}.`);if(t.end+1<=e*o)return[t,void 0];const i=e*o-1,s=e*o;return[{start:t.start,end:i,label:t.label,bits:i-t.start},{start:s,end:t.end,label:t.label,bits:t.end-s}]},"getNextFittingBlock"),R={parse:l(async t=>{const e=await N("packet",t);v.debug(e),O(e)},"parse")},U=l((t,e,o,i)=>{const s=i.db,r=s.getConfig(),{rowHeight:a,paddingY:c,bitWidth:m,bitsPerRow:p}=r,d=s.getPacket(),n=s.getDiagramTitle(),f=a+c,g=f*(d.length+1)-(n?0:a),k=m*p+2,b=_(e);b.attr("viewbox",`0 0 ${k} ${g}`),A(b,g,k,r.useMaxWidth);for(const[C,$]of d.entries())X(b,$,C,r);b.append("text").text(n).attr("x",k/2).attr("y",g-f/2).attr("dominant-baseline","middle").attr("text-anchor","middle").attr("class","packetTitle")},"draw"),X=l((t,e,o,{rowHeight:i,paddingX:s,paddingY:r,bitWidth:a,bitsPerRow:c,showBits:m})=>{const p=t.append("g"),d=o*(i+r)+r;for(const n of e){const f=n.start%c*a+1,g=(n.end-n.start+1)*a-s;if(p.append("rect").attr("x",f).attr("y",d).attr("width",g).attr("height",i).attr("class","packetBlock"),p.append("text").attr("x",f+g/2).attr("y",d+i/2).attr("class","packetLabel").attr("dominant-baseline","middle").attr("text-anchor","middle").text(n.label),!m)continue;const k=n.end===n.start,b=d-2;p.append("text").attr("x",f+(k?g/2:0)).attr("y",b).attr("class","packetByte start").attr("dominant-baseline","auto").attr("text-anchor",k?"middle":"start").text(n.start),k||p.append("text").attr("x",f+g).attr("y",b).attr("class","packetByte end").attr("dominant-baseline","auto").attr("text-anchor","end").text(n.end)}},"drawWord"),j={draw:U},q={byteFontSize:"10px",startByteColor:"black",endByteColor:"black",labelColor:"black",labelFontSize:"12px",titleColor:"black",titleFontSize:"14px",blockStrokeColor:"black",blockStrokeWidth:"1",blockFillColor:"#efefef"},J=l(({packet:t}={})=>{const e=w(q,t);return`
	.packetByte {
		font-size: ${e.byteFontSize};
	}
	.packetByte.start {
		fill: ${e.startByteColor};
	}
	.packetByte.end {
		fill: ${e.endByteColor};
	}
	.packetLabel {
		fill: ${e.labelColor};
		font-size: ${e.labelFontSize};
	}
	.packetTitle {
		fill: ${e.titleColor};
		font-size: ${e.titleFontSize};
	}
	.packetBlock {
		stroke: ${e.blockStrokeColor};
		stroke-width: ${e.blockStrokeWidth};
		fill: ${e.blockFillColor};
	}
	`},"styles"),Et={parser:R,db:h,renderer:j,styles:J};export{Et as diagram};
